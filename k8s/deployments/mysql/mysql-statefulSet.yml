apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: mysql
  labels:
    app: mysql
    environment: demo
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 2
  serviceName: "mysql"
  template:
    metadata:
      name: mysql
      labels:
        app: mysql
        environment: demo
        tier: server
    spec:
      initContainers:
        - name: init-mysql
          image: mysql:5.7
          volumeMounts:
            - name: conf
              mountPath: /mnt/conf.d
            - name: config-map
              mountPath: /mnt/config-map
          command: 
            - "bash"
            - "-c"
            - |
              set -ex
              # Generate mysql server-id from pod ordinal index.
              [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              echo [mysqld] > /mnt/conf.d/server-id.cnf
              # Add an offset to avoid reserved server-id=0 value.
              echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
              if [[ $ordinal -eq 0 ]]; then
                 cp /mnt/config-map/master.cnf /mnt/conf.d/
              else
                 cp /mnt/config-map/slave.cnf /mnt/conf.d/
              fi
              
              
        - name: clone-mysql
          image: ist0ne/xtrabackup:1.0
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
          command:
            - "bash"
            - "-c"
            - |
              set -ex
              [[ -d /var/lib/mysql/mysql ]] && exit 0
              [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              [[ $ordinal -eq 0 ]] && exit 0
              # Clone data from previous peer.
              ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
              # Prepare the backup.
              xtrabackup --prepare --target-dir=/var/lib/mysql
           
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: "MYSQL_ALLOW_EMPTY_PASSWORD"
              value: "1"
          ports:
            - name: mysql
              containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
          livenessProbe:
            exec:
              command: ["mysqladmin", "ping"]
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command: ["mysql", "-h", "127.0.0.1", "-e", "select 1"]
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
          lifecycle:
            postStart:
              exec:
                command:
                  - "bash"
                  - "-c"
                  - |
                    # wait for server up
                    until mysqladmin ping -h"127.0.0.1" --silent; do sleep 1; done
                    # create a backup user and slave user on master
                    [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1
                    ordinal=${BASH_REMATCH[1]}
                    if [[ $ordinal -eq 0 ]]; then
                      mysql -h 127.0.0.1 <<EOF
                      grant RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT, replication slave on *.* to 'ikee'@'%' identified by 'ikee';
                      flush privileges;
                    EOF
                    fi
                    
        - name: backup
          image: ist0ne/xtrabackup:1.0
          ports:
            - name: backup
              containerPort: 3307
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
          command:
            - "bash"
            - "-c"
            - |
              cd /var/lib/mysql
              # wait for server up
              until mysqladmin ping -h"127.0.0.1" --silent; do sleep 1; done
              # Determine binlog position of cloned data, if any.
              if [[ -f xtrabackup_slave_info ]]; then
                # XtraBackup already generated a partial "CHANGE MASTER TO" query
                # because we're cloning from an existing slave.
                mv xtrabackup_slave_info change_master_to.sql.in
                # Ignore xtrabackup_binlog_info in this case (it's useless).
                rm -f xtrabackup_binlog_info
              elif [[ -f xtrabackup_binlog_info ]]; then
                # We're cloning directly from master. Parse binlog position.
                [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
                rm xtrabackup_binlog_info
                echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                      MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
              fi
              
              # Check if we need to complete a clone by starting replication.
              if [[ -f change_master_to.sql.in ]]; then
                echo "Initializing replication from clone position"
                # In case of container restart, attempt this at-most-once.
                mv change_master_to.sql.in change_master_to.sql.orig
                mysql -h 127.0.0.1<<EOF
              $(<change_master_to.sql.orig),
                MASTER_HOST='mysql-0.mysql',
                MASTER_USER='ikee',
                MASTER_PASSWORD='ikee',
                MASTER_CONNECT_RETRY=10;
              START SLAVE;
              EOF
              fi
              # Start a server to send backups when requested by peers.
              exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
                "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
      volumes:
        - name: conf
          emptyDir: {}
        - name: config-map
          configMap:
            name: mysql-config
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: mysql
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
          limits:
            storage: 2Gi
    
